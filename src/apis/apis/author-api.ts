/* tslint:disable */
/* eslint-disable */
/**
 * ポートフォリオのAPIインタフェース定義
 * ポートフォリオのAPIインタフェース定義
 *
 * OpenAPI spec version: 2.0.0
 * Contact: awpjdmga1943@icloud.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
import { InlineResponse2008 } from '../models'
import { InlineResponse2009 } from '../models'
import { InlineResponse400 } from '../models'
/**
 * AuthorApi - axios parameter creator
 * @export
 */
export const AuthorApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 著者データを取得する
     * @summary 著者データを取得する
     * @param {string} id 著者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthor: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getAuthor.',
        )
      }
      const localVarPath = `/author/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     * 著者のリストを取得する
     * @summary 著者のリストを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthors: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/authors`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthorApi - functional programming interface
 * @export
 */
export const AuthorApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 著者データを取得する
     * @summary 著者データを取得する
     * @param {string} id 著者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthor(
      id: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2009>
    > {
      const localVarAxiosArgs = await AuthorApiAxiosParamCreator(
        configuration,
      ).getAuthor(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * 著者のリストを取得する
     * @summary 著者のリストを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthors(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2008>
    > {
      const localVarAxiosArgs = await AuthorApiAxiosParamCreator(
        configuration,
      ).getAuthors(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AuthorApi - factory interface
 * @export
 */
export const AuthorApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * 著者データを取得する
     * @summary 著者データを取得する
     * @param {string} id 著者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthor(id: string, options?: any): AxiosPromise<InlineResponse2009> {
      return AuthorApiFp(configuration)
        .getAuthor(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 著者のリストを取得する
     * @summary 著者のリストを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthors(options?: any): AxiosPromise<InlineResponse2008> {
      return AuthorApiFp(configuration)
        .getAuthors(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthorApi - object-oriented interface
 * @export
 * @class AuthorApi
 * @extends {BaseAPI}
 */
export class AuthorApi extends BaseAPI {
  /**
   * 著者データを取得する
   * @summary 著者データを取得する
   * @param {string} id 著者ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorApi
   */
  public getAuthor(id: string, options?: any) {
    return AuthorApiFp(this.configuration)
      .getAuthor(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * 著者のリストを取得する
   * @summary 著者のリストを取得する
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorApi
   */
  public getAuthors(options?: any) {
    return AuthorApiFp(this.configuration)
      .getAuthors(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
