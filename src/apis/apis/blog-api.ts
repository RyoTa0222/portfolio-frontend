/* tslint:disable */
/* eslint-disable */
/**
 * ポートフォリオのAPIインタフェース定義
 * ポートフォリオのAPIインタフェース定義
 *
 * OpenAPI spec version: 1.0.0
 * Contact: awpjdmga1943@icloud.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
import { InlineResponse2002 } from '../models'
import { InlineResponse2003 } from '../models'
import { InlineResponse2004 } from '../models'
import { InlineResponse2005 } from '../models'
import { InlineResponse2006 } from '../models'
import { InlineResponse400 } from '../models'
/**
 * BlogApi - axios parameter creator
 * @export
 */
export const BlogApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ブログの設定の取得
     * @summary ブログの設定の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlog: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/blog`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     * ブログのコンテンツの取得
     * @summary ブログのコンテンツの取得
     * @param {number} offset 何番目から取得するか
     * @param {number} limit 何個取得するか
     * @param {string} [searchWord] 検索ワード
     * @param {string} [tag] タグ
     * @param {string} [time] 絞り込み期間
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogContents: async (
      offset: number,
      limit: number,
      searchWord?: string,
      tag?: string,
      time?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'offset' is not null or undefined
      if (offset === null || offset === undefined) {
        throw new RequiredError(
          'offset',
          'Required parameter offset was null or undefined when calling getBlogContents.',
        )
      }
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          'limit',
          'Required parameter limit was null or undefined when calling getBlogContents.',
        )
      }
      const localVarPath = `/blog/contents`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (searchWord !== undefined) {
        localVarQueryParameter['search_word'] = searchWord
      }

      if (tag !== undefined) {
        localVarQueryParameter['tag'] = tag
      }

      if (time !== undefined) {
        localVarQueryParameter['time'] =
          (time as any) instanceof Date
            ? (time as any).toISOString().substr(0, 10)
            : time
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     * ブログのコンテンツ詳細の取得
     * @summary ブログのコンテンツ詳細の取得
     * @param {string} id ブログのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogContentsDetail: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getBlogContentsDetail.',
        )
      }
      const localVarPath = `/blog/contents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     * ブログの評価を取得する
     * @summary ブログの評価を取得する
     * @param {string} id ブログのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogContentsLgtm: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getBlogContentsLgtm.',
        )
      }
      const localVarPath = `/blog/contents/lgtm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     * ブログの評価をする
     * @summary ブログの評価をする
     * @param {any} body 記事の評価
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogContentsLgtm: async (
      body: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling postBlogContentsLgtm.',
        )
      }
      const localVarPath = `/blog/contents/lgtm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * BlogApi - functional programming interface
 * @export
 */
export const BlogApiFp = function (configuration?: Configuration) {
  return {
    /**
     * ブログの設定の取得
     * @summary ブログの設定の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlog(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2002>
    > {
      const localVarAxiosArgs = await BlogApiAxiosParamCreator(
        configuration,
      ).getBlog(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * ブログのコンテンツの取得
     * @summary ブログのコンテンツの取得
     * @param {number} offset 何番目から取得するか
     * @param {number} limit 何個取得するか
     * @param {string} [searchWord] 検索ワード
     * @param {string} [tag] タグ
     * @param {string} [time] 絞り込み期間
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlogContents(
      offset: number,
      limit: number,
      searchWord?: string,
      tag?: string,
      time?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2003>
    > {
      const localVarAxiosArgs = await BlogApiAxiosParamCreator(
        configuration,
      ).getBlogContents(offset, limit, searchWord, tag, time, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * ブログのコンテンツ詳細の取得
     * @summary ブログのコンテンツ詳細の取得
     * @param {string} id ブログのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlogContentsDetail(
      id: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2004>
    > {
      const localVarAxiosArgs = await BlogApiAxiosParamCreator(
        configuration,
      ).getBlogContentsDetail(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * ブログの評価を取得する
     * @summary ブログの評価を取得する
     * @param {string} id ブログのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlogContentsLgtm(
      id: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2005>
    > {
      const localVarAxiosArgs = await BlogApiAxiosParamCreator(
        configuration,
      ).getBlogContentsLgtm(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * ブログの評価をする
     * @summary ブログの評価をする
     * @param {any} body 記事の評価
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postBlogContentsLgtm(
      body: any,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2006>
    > {
      const localVarAxiosArgs = await BlogApiAxiosParamCreator(
        configuration,
      ).postBlogContentsLgtm(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * BlogApi - factory interface
 * @export
 */
export const BlogApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * ブログの設定の取得
     * @summary ブログの設定の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlog(options?: any): AxiosPromise<InlineResponse2002> {
      return BlogApiFp(configuration)
        .getBlog(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * ブログのコンテンツの取得
     * @summary ブログのコンテンツの取得
     * @param {number} offset 何番目から取得するか
     * @param {number} limit 何個取得するか
     * @param {string} [searchWord] 検索ワード
     * @param {string} [tag] タグ
     * @param {string} [time] 絞り込み期間
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogContents(
      offset: number,
      limit: number,
      searchWord?: string,
      tag?: string,
      time?: string,
      options?: any,
    ): AxiosPromise<InlineResponse2003> {
      return BlogApiFp(configuration)
        .getBlogContents(offset, limit, searchWord, tag, time, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * ブログのコンテンツ詳細の取得
     * @summary ブログのコンテンツ詳細の取得
     * @param {string} id ブログのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogContentsDetail(
      id: string,
      options?: any,
    ): AxiosPromise<InlineResponse2004> {
      return BlogApiFp(configuration)
        .getBlogContentsDetail(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * ブログの評価を取得する
     * @summary ブログの評価を取得する
     * @param {string} id ブログのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogContentsLgtm(
      id: string,
      options?: any,
    ): AxiosPromise<InlineResponse2005> {
      return BlogApiFp(configuration)
        .getBlogContentsLgtm(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * ブログの評価をする
     * @summary ブログの評価をする
     * @param {any} body 記事の評価
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogContentsLgtm(
      body: any,
      options?: any,
    ): AxiosPromise<InlineResponse2006> {
      return BlogApiFp(configuration)
        .postBlogContentsLgtm(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * BlogApi - object-oriented interface
 * @export
 * @class BlogApi
 * @extends {BaseAPI}
 */
export class BlogApi extends BaseAPI {
  /**
   * ブログの設定の取得
   * @summary ブログの設定の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public getBlog(options?: any) {
    return BlogApiFp(this.configuration)
      .getBlog(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * ブログのコンテンツの取得
   * @summary ブログのコンテンツの取得
   * @param {number} offset 何番目から取得するか
   * @param {number} limit 何個取得するか
   * @param {string} [searchWord] 検索ワード
   * @param {string} [tag] タグ
   * @param {string} [time] 絞り込み期間
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public getBlogContents(
    offset: number,
    limit: number,
    searchWord?: string,
    tag?: string,
    time?: string,
    options?: any,
  ) {
    return BlogApiFp(this.configuration)
      .getBlogContents(offset, limit, searchWord, tag, time, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * ブログのコンテンツ詳細の取得
   * @summary ブログのコンテンツ詳細の取得
   * @param {string} id ブログのID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public getBlogContentsDetail(id: string, options?: any) {
    return BlogApiFp(this.configuration)
      .getBlogContentsDetail(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * ブログの評価を取得する
   * @summary ブログの評価を取得する
   * @param {string} id ブログのID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public getBlogContentsLgtm(id: string, options?: any) {
    return BlogApiFp(this.configuration)
      .getBlogContentsLgtm(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * ブログの評価をする
   * @summary ブログの評価をする
   * @param {any} body 記事の評価
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public postBlogContentsLgtm(body: any, options?: any) {
    return BlogApiFp(this.configuration)
      .postBlogContentsLgtm(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
