/* tslint:disable */
/* eslint-disable */
/**
 * ポートフォリオのAPIインタフェース定義
 * ポートフォリオのAPIインタフェース定義
 *
 * OpenAPI spec version: 1.0.0
 * Contact: awpjdmga1943@icloud.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
import { InlineResponse2007 } from '../models'
import { InlineResponse400 } from '../models'
/**
 * RoadmapApi - axios parameter creator
 * @export
 */
export const RoadmapApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ロードマップを取得する
     * @summary ロードマップを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoadMap: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/roadmap`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoadmapApi - functional programming interface
 * @export
 */
export const RoadmapApiFp = function (configuration?: Configuration) {
  return {
    /**
     * ロードマップを取得する
     * @summary ロードマップを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoadMap(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2007>
    > {
      const localVarAxiosArgs = await RoadmapApiAxiosParamCreator(
        configuration,
      ).getRoadMap(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoadmapApi - factory interface
 * @export
 */
export const RoadmapApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * ロードマップを取得する
     * @summary ロードマップを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoadMap(options?: any): AxiosPromise<InlineResponse2007> {
      return RoadmapApiFp(configuration)
        .getRoadMap(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RoadmapApi - object-oriented interface
 * @export
 * @class RoadmapApi
 * @extends {BaseAPI}
 */
export class RoadmapApi extends BaseAPI {
  /**
   * ロードマップを取得する
   * @summary ロードマップを取得する
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoadmapApi
   */
  public getRoadMap(options?: any) {
    return RoadmapApiFp(this.configuration)
      .getRoadMap(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
